[{"/Users/umar-mohammad/code/react-spotify/SpotifyPlaylistsDisplay/src/reportWebVitals.js":"1","/Users/umar-mohammad/code/react-spotify/SpotifyPlaylistsDisplay/src/App.js":"2","/Users/umar-mohammad/code/react-spotify/SpotifyPlaylistsDisplay/src/index.js":"3"},{"size":362,"mtime":1611269836919,"results":"4","hashOfConfig":"5"},{"size":9294,"mtime":1611418558692,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1611269836918,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qqc9lw",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/umar-mohammad/code/react-spotify/SpotifyPlaylistsDisplay/src/reportWebVitals.js",[],"/Users/umar-mohammad/code/react-spotify/SpotifyPlaylistsDisplay/src/App.js",["15","16","17"],"import React, { Component } from \"react\";\nimport \"./App.css\";\nimport queryString from \"query-string\";\nlet defaultTextColor = \"#fff\";\n\nlet defaultStyle = {\n    color: defaultTextColor,\n};\n\nlet fakeServerData = {\n    user: {\n        name: \"Umar\",\n        playlists: [\n            {\n                name: \"My favorites\",\n                songs: [\n                    { name: \"Beat It\", duration: 1345 },\n                    { name: \"Cannelloni Makaroni\", duration: 1236 },\n                    { name: \"Rosa helikopter\", duration: 70000 },\n                ],\n            },\n            {\n                name: \"Discover Weekly\",\n                songs: [\n                    { name: \"Beat It\", duration: 1345 },\n                    { name: \"Cannelloni Makaroni\", duration: 1236 },\n                    { name: \"Rosa helikopter\", duration: 70000 },\n                ],\n            },\n            {\n                name: \"Another playlist - the best!\",\n                songs: [\n                    { name: \"Beat It\", duration: 1345 },\n                    { name: \"Hallelujah\", duration: 1236 },\n                    { name: \"Rosa helikopter\", duration: 70000 },\n                ],\n            },\n            {\n                name: \"Playlist - yeah!\",\n                songs: [\n                    { name: \"Beat It\", duration: 1345 },\n                    { name: \"Cannelloni Makaroni\", duration: 1236 },\n                    { name: \"Hej Hej Monika\", duration: 70000 },\n                ],\n            },\n        ],\n    },\n};\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = { serverData: {}, filterString: \"\" };\n    }\n    componentDidMount() {\n        let parsed = queryString.parse(window.location.search);\n        let accessToken = parsed.access_token;\n        if (!accessToken) return;\n\n        fetch(\"https://api.spotify.com/v1/me\", {\n            headers: { Authorization: \"Bearer \" + accessToken },\n        })\n            .then((response) => response.json())\n            .then((data) =>\n                this.setState({\n                    user: {\n                        name: data.display_name,\n                    },\n                })\n            );\n\n        fetch(\"https://api.spotify.com/v1/me/playlists\", {\n            headers: { Authorization: \"Bearer \" + accessToken },\n        })\n            .then((response) => response.json())\n            .then((playlistData) => {\n                let playlists = playlistData.items;\n                let trackDataPromises = playlists.map((playlist) => {\n                    //take each playlist and fetch its tracks\n                    let promises = fetch(playlist.tracks.href, {\n                        headers: { Authorization: \"Bearer \" + accessToken },\n                    });\n                    //transform the array of response objects to array into json objects we can use\n                    let tracksPromise = promises.then((response) =>\n                        response.json()\n                    );\n                    return tracksPromise;\n                });\n                //when all the promises have delivered\n                let playlistsPromise = Promise.all(trackDataPromises).then(\n                    (tracks_in_playlists) => {\n                        tracks_in_playlists.forEach((tracks, i) => {\n                            //take array of tracks and add them to the corresponding playlist\n                            playlists[i].tracks = tracks.items\n                                .map((item) => item.track)\n                                .map((trackData) =>\n                                    trackData != null\n                                        ? {\n                                              name: trackData.name,\n                                              duration:\n                                                  trackData.duration_ms / 1000,\n                                          }\n                                        : \"\"\n                                );\n                        });\n                        return playlists;\n                    }\n                );\n                return playlistsPromise;\n            })\n            .then((playlists) =>\n                this.setState({\n                    playlists: playlists.map((playlist) => {\n                        return {\n                            name: playlist.name,\n                            imageUrl: playlist.images[0].url,\n                            songs: playlist.tracks,\n                        };\n                    }),\n                })\n            );\n    }\n    render() {\n        let playlistsToRender =\n            this.state.user && this.state.playlists\n                ? this.state.playlists.filter((playlist) =>\n                      playlist.name\n                          .toLowerCase()\n                          .includes(this.state.filterString.toLowerCase())\n                  )\n                : [];\n        return (\n            <div className=\"App\">\n                {this.state.user ? (\n                    <div>\n                        <h1>{this.state.user.name}'s playlists</h1>\n                        <PlaylistCounter playlists={playlistsToRender} />\n                        <HoursCounter playlists={playlistsToRender} />\n                        <Filter\n                            onTextChange={(text) =>\n                                this.setState({ filterString: text })\n                            }\n                        />\n                        <div\n                            style={{\n                                display: \"flex\",\n                                \"flex-wrap\": \"wrap\",\n                                margin: \"10px\",\n                            }}\n                        >\n                            {playlistsToRender.map((playlist) => (\n                                <Playlist playlist={playlist} />\n                            ))}\n                        </div>\n                    </div>\n                ) : (\n                    <button\n                        onClick={() => {\n                            window.location = window.location.href.includes(\n                                \"localhost\"\n                            )\n                                ? \"http://localhost:8888/login\"\n                                : \"https://spotify-display-backend.herokuapp.com/login\";\n                        }}\n                        style={{\n                            padding: \"20px\",\n                            \"font-size\": \"50px\",\n                            \"margin-top\": \"20px\",\n                        }}\n                    >\n                        Sign in with Spotify\n                    </button>\n                )}\n            </div>\n        );\n    }\n}\n\nclass PlaylistCounter extends Component {\n    render() {\n        return (\n            <div\n                style={{\n                    ...defaultStyle,\n                    width: \"40%\",\n                    display: \"inline-block\",\n                }}\n            >\n                <h2 style={{ color: \"#fff\" }}>\n                    {this.props.playlists.length} Playlists\n                </h2>\n            </div>\n        );\n    }\n}\n\nclass HoursCounter extends Component {\n    render() {\n        let songs = this.props.playlists.reduce((songs, playlist) => {\n            return songs.concat(playlist.songs);\n        }, []);\n        let totalDuration = songs.reduce((sum, song) => {\n            return sum + (isNaN(song.duration) ? 0 : song.duration);\n        }, 0);\n        return (\n            <div\n                style={{\n                    ...defaultStyle,\n                    width: \"40%\",\n                    display: \"inline-block\",\n                }}\n            >\n                {Math.round(totalDuration / 60) < 60 ? (\n                    <h2 style={{ color: \"#fff\" }}>\n                        {Math.round(totalDuration / 60)} Minutes\n                    </h2>\n                ) : (\n                    <h2 style={{ color: \"#fff\" }}>\n                        {Math.round(totalDuration / (60 * 60))} Hours\n                    </h2>\n                )}\n            </div>\n        );\n    }\n}\n\nclass Filter extends Component {\n    render() {\n        return (\n            <div style={defaultStyle}>\n                <img />\n                <input\n                    type=\"text\"\n                    onKeyUp={(event) =>\n                        this.props.onTextChange(event.target.value)\n                    }\n                />\n            </div>\n        );\n    }\n}\n\nclass Playlist extends Component {\n    render() {\n        return (\n            <div\n                style={{\n                    ...defaultStyle,\n                    width: \"25%\",\n                    display: \"inline-block\",\n                }}\n            >\n                <img\n                    src={this.props.playlist.imageUrl}\n                    style={{\n                        padding: \"20px\",\n                        width: \"300px\",\n                    }}\n                />\n                <h3>{this.props.playlist.name}</h3>\n                <ul>\n                    {this.props.playlist.songs.slice(0, 3).map((song) => (\n                        <li> {song.name} </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\nexport default App;\n","/Users/umar-mohammad/code/react-spotify/SpotifyPlaylistsDisplay/src/index.js",[],{"ruleId":"18","severity":1,"message":"19","line":10,"column":5,"nodeType":"20","messageId":"21","endLine":10,"endColumn":19},{"ruleId":"22","severity":1,"message":"23","line":231,"column":17,"nodeType":"24","endLine":231,"endColumn":24},{"ruleId":"22","severity":1,"message":"23","line":253,"column":17,"nodeType":"24","endLine":259,"endColumn":19},"no-unused-vars","'fakeServerData' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]